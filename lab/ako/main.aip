# Before All

```lua
local p_utils = require("prompt_utils")

-- 
local LABEL_FETCH_SLIM = "   Fetch & Slim Agent:"
local LABEL_AUGMENT    = "Clean & Augment Agent:"
local LABEL_LLMS       = "     llms Index Agent:"
local LABEL_SUMMARY    = "              Summary:"

-- If return a string, means not valid, and it's the message
local valid = p_utils.validate_aip_version()
if type(valid) == "string" then
  return aip.flow.skip(valid)
end

-- Get the first input (optional name of the config file) or nil
local input = inputs and inputs[1] or nil

-- The input is the eventual config path
local init_res = p_utils.init_config(input)

if init_res.type == "message" then
  aip.run.pin("msg", 0, { label = "Action Needed:", content = init_res.data} )
  return {
    init_res = init_res
  }
end

if init_res.type == "config" then
  local config = init_res.data

  local settings = p_utils.build_settings(config)

  aip.run.pin("fetch-slim", 0, { label = LABEL_FETCH_SLIM, content = "⏸ Queued"})
  aip.run.pin("augm", 1,       { label = LABEL_AUGMENT, content = "⏸ Queued"})
  aip.run.pin("llms", 2,       { label = LABEL_LLMS, content = "⏸ Queued"})

  -- == Run Slim
  aip.run.pin("fetch-slim", 0, { label = LABEL_FETCH_SLIM, content = "▶ Running"})

  local slim_msg = ""
  local num_of_files = nil
  local orig_html_total_size = nil
  local raw_md_total_size = nil
  -- We perform the fetch & slim
  if config.do_fetch_slim == nil or config.do_fetch_slim == true then
    local slim_data      = aip.agent.run("fetch-slim", {inputs = { config.config_path } }).after_all
    num_of_files         = slim_data.num_of_files
    orig_html_total_size = slim_data.orig_html_total_size
    raw_md_total_size    = slim_data.raw_md_total_size
  -- We skip the fetch & slim
  end

  -- If we do not have a num_of_files (when do_fetch_slim == false ) or was 0
  -- Might still have files to be processed
  if num_of_files == nil or num_of_files == 0 then
    local orig_stats     = aip.file.stats(settings.dir_0_original .. "/**/*")
    local raw_stats      = aip.file.stats(settings.dir_2_raw_md .. "/**/*")
    num_of_files         = raw_stats.number_of_files -- this way allows to just use the augment 
    orig_html_total_size = orig_stats.total_size
    raw_md_total_size    = raw_stats.total_size
    slim_msg = "■■ SKIP ➜ " .. slim_msg
  else 
    slim_msg = "✅ DONE ➜ " .. slim_msg
  end
  
  
  slim_msg = slim_msg .. num_of_files .. " pages processed."
  slim_msg = slim_msg .. " " .. aip.text.format_size(orig_html_total_size, {trim = true})
  slim_msg = slim_msg .. " ➜ " .. aip.text.format_size(raw_md_total_size, {trim = true})
  aip.run.pin("fetch-slim", 0, { label = LABEL_FETCH_SLIM, content = slim_msg})

  if num_of_files == 0 then
    -- ✖
    aip.run.pin("augm", 1, { label = LABEL_AUGMENT, content = "✖ Canceled, no files to process."})
    aip.run.pin("llms", 1, { label = LABEL_LLMS, content = "✖ Canceled, no files to process."})
    return
  end
  
  -- == Run Augment
  local augment_msg = nil

  if config.do_augment == nill or config.do_augment == true then 
    aip.run.pin("augm", 1, { label = LABEL_AUGMENT, content = "▶ Running"})

    local augment_data = aip.agent.run("clean-augment", {inputs = { config.config_path } }).after_all
    augment_msg = "✅ DONE ➜ " .. augment_data.processed_count .. " AI Augmented"
    if num_of_files then
        local already_processed_count = num_of_files - augment_data.processed_count - (augment_data.skipped_count or 0)
        if already_processed_count > 0 then 
            augment_msg = augment_msg .. " - " .. already_processed_count .. " already processed."
        end
    end
    augment_msg = augment_msg .. " " .. aip.text.trim(augment_data.raw_size_fmt) .. " ➜ " .. aip.text.trim(augment_data.final_size_fmt)
  else
    augment_msg = "■■ SKIP ➜ " .. "(do_augment = false)"
  end

  aip.run.pin("augm", 1, { label = LABEL_AUGMENT, content = augment_msg })

  -- == Run llms
  if settings.config.do_llms == nil or settings.config.do_llms == true then 
     aip.run.pin("llms", 2, { label = LABEL_LLMS, content = "▶ Running"})
     
     local llms_data = aip.agent.run("llms-index", {inputs = { config.config_path } }).after_all
     local llms_size_fmt = aip.text.format_size(llms_data.llms_size, { trim = true})
     local llms_msg = "✅ DONE ➜ " .. llms_data.llms_path .. " (" .. llms_size_fmt .. ")"
     
     aip.run.pin("llms", 2,  { label = LABEL_LLMS, content = llms_msg})
  else
     local llms_msg = "■■ SKIP ➜ " .. "(do_llms = false or no files to llms)"
     aip.run.pin("llms", 2,  { label = LABEL_LLMS, content = llms_msg})
  end

  -- == Pin final
  local original_size_fmt = aip.text.format_size(orig_html_total_size, "MB")
  local final_size = aip.file.stats(settings.dir_4_final_md .. "/**/*.*").total_size
  local final_size_fmt = aip.text.format_size(final_size, "MB")
  if final_size < 1000000 then
    local full_size_fmt = aip.text.format_size(final_size, { trim = true})
    final_size_fmt = final_size_fmt .. " (" .. full_size_fmt .. ")"
  end

  local final_msg = "✅ ALL DONE"
  final_msg = final_msg .. "\n" .. "     From Original HTMLs size: " .. original_size_fmt
  final_msg = final_msg .. "\n" .. "To AI Optimized Markdown size: " .. final_size_fmt .. " including llms.md"

  aip.run.pin("final", 2, { label = LABEL_SUMMARY, content = final_msg})
else 
  print("init response unknown", init_res)
end


-- return aip.flow.before_all_response({
--   before_all = { "one", "two" }
-- })

```


# After All

```lua
-- print("slim agent\n50 files slimmed")
-- 
-- print("agument agent\n[ ] [ ] [ ]")
-- 
-- print("before_all",before_all)

return "Done"

```