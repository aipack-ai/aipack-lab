# Before All

```lua
local p_utils = require("prompt_utils")

-- If return a string, means not valid, and it's the message
local valid = p_utils.validate_aip_version()
if type(valid) == "string" then
  return aip.flow.skip(valid)
end

-- Get the first input (optional name of the config file) or nil
local input = inputs and inputs[1] or nil

-- The input is the eventual config path
local init_res = p_utils.init_config(input)

if init_res.type == "message" then
  aip.run.pin("msg", 0, { label = "Action Needed:", content = init_res.data} )
  return {
    init_res = init_res
  }
end

if init_res.type == "config" then
  local config = init_res.data

  aip.run.pin("slim", 0, { label = "   Slim Agent:", content = "⏸ Queued"})
  aip.run.pin("augm", 1, { label = "Augment Agent:", content = "⏸ Queued"})
  aip.run.pin("llms", 2, { label = "   LLms Agent:", content = "⏸ Queued"})

  -- == Run Slim
  aip.run.pin("slim", 0, { label = "   Slim Agent:", content = "▶ Running"})

  local slim_data = aip.agent.run("slim", {inputs = { config.config_path } }).after_all

  local slim_msg = "" .. slim_data.num_of_files .. " pages processed."
  slim_msg = slim_msg .. " " .. aip.text.trim(aip.text.format_size(slim_data.orig_html_total_size))
  slim_msg = slim_msg .. " ➜ " .. aip.text.trim(aip.text.format_size(slim_data.raw_md_total_size))
  aip.run.pin("slim", 0, { label = "   Slim Agent:", content = "✅ DONE - " .. slim_msg})
  
  -- == Run Augment
  aip.run.pin("augm", 1, { label = "Augment Agent:", content = "▶ Running"})

  local augment_data = aip.agent.run("augment", {inputs = { config.config_path } }).after_all
  local agument_msg = "✅ DONE - " .. augment_data.processed_count .. " AI Augmented"
  if augment_data.skipped_count > 0 then
      agument_msg = agument_msg .. " - " .. augment_data.skipped_count .. " already processed."
  end
  aip.run.pin("augm", 1, { label = "Augment Agent:", content = agument_msg })

  -- == Run llms
  aip.run.pin("llms", 2, { label = "   LLMs Agent:", content = "▶ Running"})

  local llms_data = aip.agent.run("llms", {inputs = { config.config_path } }).after_all
  local llms_msg = "✅ DONE - llms.txt path: " .. llms_data.llms_path
  
  aip.run.pin("llms", 2, { label = "   LLms Agent:", content = llms_msg})

else 
  print("init response unknown", init_res)
end


-- return aip.flow.before_all_response({
--   before_all = { "one", "two" }
-- })

```


# After All

```lua
-- print("slim agent\n50 files slimmed")
-- 
-- print("agument agent\n[ ] [ ] [ ]")
-- 
-- print("before_all",before_all)

return "Done"

```