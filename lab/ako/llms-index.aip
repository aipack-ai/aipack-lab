# Data

```lua
local p_utils = require("prompt_utils")

-- If return a string, means not valid, and it's the message
local valid = p_utils.validate_aip_version()
if type(valid) == "string" then
  return aip.flow.skip(valid)
end


-- input is nil or the config_path
local init_res = p_utils.init_config(input)

if init_res.type == "message" then
  print(init_res.data)
  return
end

-- Assuming type = "config"
local config = init_res.data

local settings = p_utils.build_settings(config)

local globs = {
  settings.dir_3_sum_md .. "/**/*.md",
}

local files = aip.file.list_load(globs)

local msg =    "Processing llms.md for ➜ " .. #files .. " files"
aip.run.pin("status", {label = "Starting:", content = msg})

local prompt_path = settings.config.llms_prompt
local custom_prompt = nil
if prompt_path and aip.path.exists(prompt_path) then
  custom_prompt = aip.file.load(prompt_path).content
end

print("Creating llms.md for " .. #files .. " files")

return aip.flow.data_response({
  options = {
    model = config.llms_model
  },
  data = {
    files          = files,
    custom_prompt  = custom_prompt,
    dir_4_final_md = settings.dir_4_final_md
  }
})

```

# System

You are an agent that create `llms.md` in markdown from a list of files and their content. 

A summary of each file will be given, and your goal create single index files with the summary for each

Here is the format of the llms.md (use this format except if the user ask for something different)

```
# overall_doc_title

ONE_PARAGRAPH_SUMMARY

## file_path_without_the_sum_prefix_dir

FILE_CONCISE_SUMMARY

## ...next file
```

So, for each file, we will have a `## file_path_without_the_sum_prefix_dir` section, with the `{{data.dir_3_sum_md}}` prefix.

The `FILE_CONCISE_SUMMARY` is a very concise summary of the file, condensed into 1 to 3 concise sentences that focus solely on describing its essence.

No need to preface the paragraph with "This document..."; simply state directly what this file is about. For example

- Do not start with "This document provides an overview of ..."
- But just with "Overview of ..."

It is already clear which file this section pertains to.

# Instruction

Here are all of the files we need to build a llms.md for. 

{{#each data.files}}
{{this.path}}
```{{this.ext}}
{{this.content}}
```

{{/each}}

- Make sure that for each file you add the description of the file. 
- Make sure the link paths are relative to the root website site (wihtout the leading /, and not including the `{{data.dir_3_sum_md}}` prefix)

# Instruction

{{#if data.custom_prompt}}

Here are some important additional instructions on how to process this raw markdown file

{{data.custom_prompt}}

{{/if}}

# Output

```lua

if ai_response == nil then
  return "no AI Response"
end

-- remove the eventual block content
local content = aip.md.outer_block_content_or_raw(ai_response.content)

local llms_path = data.dir_4_final_md .. "/llms.md"
local llms_file = aip.file.save(llms_path, content)
local llms_size_fmt = aip.text.format_size(llms_file.size, {trim = true})
local msg =    "✅ " .. llms_path .. " processed (" .. llms_size_fmt .. ")."
aip.run.pin("status", {label = "DONE:", content = msg})

return {
  _display      = "LLM Index File (" .. llms_size_fmt .. ")" .. "\n➜ " .. llms_path,
  llms_path     = llms_path,
  llms_size     = llms_file.size
}

```

# After All

```lua

return {
  llms_path = outputs[1].llms_path,
  llms_size = outputs[1].llms_size
}

```

