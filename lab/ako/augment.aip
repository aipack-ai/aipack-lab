# Options

```toml
# Here can set default agent model, temperature, and input_concurrency
temperature = 0.0 
```

# Before All

```lua
local p_utils = require("prompt_utils")

-- Get the first input (optional name of the config file) or nil
local input = inputs and inputs[1] or nil

-- input is nil or the config_path
local init_res = p_utils.init_config(input)

if init_res.type == "message" then
  print(init_res.data)
  return
end

-- Assuming type = "config"
local config = init_res.data

local settings = p_utils.build_settings(config)

local files = aip.file.list(settings.dir_2_raw_md  .. "/**/*.md")
for  i, file in ipairs(files) do
    file._display = file.path
end

-- files = { files[1] }

return aip.flow.before_all_response({
    inputs     = files,
    options    = { 
        input_concurrency = config.concurrency, -- if nil, will be the default from aipack
        model = config.model, -- if nil, will be the default from aipack
    },
    before_all = {
        settings = settings
    }
})

```

# Data

```lua

local raw_md_file = input

local dest_dir = before_all.settings.dir_3_final_md

local rel_path      = aip.path.diff(raw_md_file.path, before_all.settings.dir_2_raw_md)
local dest_path     = dest_dir .. "/" .. rel_path

-- if the dest path already exist, we skip
if aip.path.exists(dest_path) then
    return aip.flow.skip("Final file '" .. dest_path .. "' already exist. So, skipping")
end

raw_md_file = aip.file.load(raw_md_file.path)

return {
    raw_md_file = raw_md_file,
    dest_path   = dest_path
}
```

> Remove `DISABLED` below to send instruction to AI

# Instruction

You need to clean up the markdown:
- Make it well-structured, with markdown sections. 
- Remove site navigation section. Just page content should be kept
- Use the `-` character for bullet points.
- Sometime the markdown link text has extract empty line, make sure they are all in one line. So, inside the `[ ... ]` should not have new line. 
- Identify possible code blocks:
  - Remove line numbers.
  - Wrap them in markdown code blocks with the appropriate language.
  - Only use code block language 'json' for valid json content, otherwise 'js' for js like, or 'text'
  - Indent the code properly.

````md
{{data.raw_md_file.content}}
````

Return the full file content as is without 
the surrounding in a markdown code block.


# Output 

```lua

local content = ai_response.content
content = aip.md.outer_block_content_or_raw(content)

aip.file.save(data.dest_path, content)

-- aip.file.append("answers.md", response .. "\n\n----\n\n")

return "DONE .. " .. data.dest_path
```