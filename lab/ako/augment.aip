# Options

```toml
# Here can set default agent model, temperature, and input_concurrency
# temperature = 0.0 # not supported in many gpt models
```

# Before All

```lua
local p_utils = require("prompt_utils")

-- If return a string, means not valid, and it's the message
local valid = p_utils.validate_aip_version()
if type(valid) == "string" then
  return aip.flow.skip(valid)
end

-- Get the first input (optional name of the config file) or nil
local input = inputs and inputs[1] or nil

-- input is nil or the config_path
local init_res = p_utils.init_config(input)

if init_res.type == "message" then
  print(init_res.data)
  return
end

-- Assuming type = "config"
local config = init_res.data

local settings  = p_utils.build_settings(config)
local max_pages = settings.config.max_pages

local files = aip.file.list(settings.dir_2_raw_md  .. "/**/*.md")


local already_processed_count = 0
local inputs = {}

for  i, file in ipairs(files) do
    if #inputs >= max_pages then
      break
    end

    local raw_md_file = file

    local rel_path   = aip.path.diff(raw_md_file.path, settings.dir_2_raw_md)
    local sum_path   = settings.dir_3_sum_md .. "/" .. rel_path
    local dest_path  = settings.dir_4_final_md .. "/" .. rel_path

    if not aip.path.exists(dest_path) then
        local size_fmt = aip.text.format_size(file.size, {trim = true})

        local disp  = "Raw Markdown File (" .. size_fmt .. ")"
        disp = disp .. "\n➜ " .. raw_md_file.path 
        local input = {
          _display     = disp,
          max_size_kb  = settings.config.max_size_kb,
          raw_md_file  = raw_md_file,
          sum_path     = sum_path,
          dest_path    = dest_path,
        }
        table.insert(inputs,input)
    else
      already_processed_count = already_processed_count + 1
    end


    ::continue::
end

-- files = { files[1] }

return aip.flow.before_all_response({
    inputs     = inputs,
    options    = { 
        input_concurrency = config.concurrency, -- if nil, will be the default from aipack
        model = config.augment_model, -- if nil, will be the default from aipack
    },
    before_all = {
        settings     = settings, 
        total_files  = #files
    }
})

```

# Data

```lua
if input == nil then
  return aip.flow.skip("All files was already AI Augmented")
end

local raw_md_file = input.raw_md_file
local dest_path   = input.dest_path
local max_size_kb = input.max_size_kb

-- if the dest path already exist, we skip
if aip.path.exists(dest_path) then
    return aip.flow.skip("Final file '" .. dest_path .. "' already exist. So, skipping")
end

raw_md_file = aip.file.load(raw_md_file.path)

if input.max_size_kb and raw_md_file.size > (max_size_kb * 1000) then
  local msg = "File too big (i.e. >100 KB): " .. aip.text.format_size(raw_md_file.size, {trim = true})
  msg = msg .. "\nFile: " .. raw_md_file.path
  return aip.flow.skip(msg)
end

local prompt_path = before_all.settings.config.augment_prompt
local custom_prompt = nil
if prompt_path and aip.path.exists(prompt_path) then
  custom_prompt = aip.file.load(prompt_path).content
end

aip.run.pin("progress", 0, {label = "Progress:", content = "➜ " .. raw_md_file.path})

return {
    raw_md_file   = raw_md_file,
    dest_path     = dest_path,
    custom_prompt = custom_prompt
}
```

> Remove `DISABLED` below to send instruction to AI

# Instruction

Your goal is to augment & fix the given file content following the following rules: 

- Make it well-structured, with markdown sections.
- Remove the site navigation section; only page content should be kept.
- Use the dash character `-` for bullet points.
- Sometimes the markdown link text has an extra blank line; make sure they are all on one line. Inside the [ ... ] there should not be any newline.
- Identify possible code blocks:
  - Remove line numbers.
  - Wrap them in markdown code blocks with the appropriate language.
  - Only use the code block language 'json' for valid JSON content; otherwise 'js' for JavaScript-like content, or 'text'.
  - If it looks like shell command use the `sh` language
  - Indent the code properly.
- For the main page title, use the # level.
- Do not separate sections with `---`


Here is the raw content

````md
{{data.raw_md_file.content}}
````

Return the full file agumented content under a `file_augmented_content` like:

<file_augmented_content>
NEW_FILE_CONTENT
</file_augmented_content>

And the file summary under a `file_summary_content` like:

<file_summary_content>
FILE_SUMMARY_CONTENT
</file_summary_content>

The FILE_SUMMARY_CONTENT should one concise sentence, empty line, and then 3 concise bullet points maximum.

The NEW_FILE_CONTENT and FILE_SUMMARY_CONTENT should be without the surrounding in a markdown code block.

# Instruction

{{#if data.custom_prompt}}

Here are some important additional instructions on how to process this raw markdown file

{{data.custom_prompt}}

{{/if}}


# Output 

```lua

local content = ai_response.content

local elem_by_name = aip.tag.extract_as_map(content, {"file_augmented_content", "file_summary_content"})


local aug_file = nil
if elem_by_name.file_augmented_content then
  aug_file = aip.file.save(input.dest_path, elem_by_name.file_augmented_content.content, {trim_start = true, single_trailing_newline = true})
else
  print("No <file_augmented_content/> tag for " .. input.dest_path)
end

local sum_file = nil
if elem_by_name.file_summary_content then
  sum_file = aip.file.save(input.sum_path, elem_by_name.file_summary_content.content, {trim_start = true, single_trailing_newline = true})
else
  print("No <file_summary_content/> tag for " .. input.sum_path)
end

-- aip.run.pin("progress", 0, {label = "Progress:", content = "✔ " .. data.dest_path})
-- "" .. data.dest_path

local display = ""
if aug_file then
  local size_fmt = aip.text.format_size(aug_file.size, {trim = true})
  display = display .. "Augmented File (" .. size_fmt .. ")\n➜ " .. input.dest_path
end

if sum_file then
  local size_fmt = aip.text.format_size(sum_file.size, {trim = true})
  display = display .. "\n\nSummary File (" .. size_fmt .. ")\n➜ " .. input.sum_path
end


return {
    _display = display
}
```

# After All 

```lua
local input_len = #inputs
local processed_count = 0
for i, o in ipairs(outputs) do
  -- Doing type check for AIPACK 0.7.17 since it is LigthUserData if skipped
  -- Future version will be "false"
  if type(o) == "table" then
    processed_count = processed_count + 1
  end
end

local msg = "✅ DONE - " .. processed_count .. " AI Augmented"
local skipped_count = input_len - processed_count
-- for now, update the skipped_count if nothing was processed
if processed_count == 0 and input_len ==1  then
  skipped_count = before_all.total_files
end
if skipped_count > 0 then
    msg = msg .. " - " .. skipped_count .. " skipped (see below)"
end

local raw_md_stats   = aip.file.stats(before_all.settings.dir_2_raw_md   .. "/**/*.md")
local sum_md_stats = aip.file.stats(before_all.settings.dir_3_sum_md .. "/**/*.md")
local final_md_stats = aip.file.stats(before_all.settings.dir_4_final_md .. "/**/*.md")

local raw_size_fmt   = aip.text.format_size(raw_md_stats.total_size)
local sum_size_fmt = aip.text.format_size(sum_md_stats.total_size)
local final_size_fmt = aip.text.format_size(final_md_stats.total_size)

msg = msg .. "\n"
msg = msg .. "\n    Raw md files: " .. raw_size_fmt
msg = msg .. "\nSummary md files: " .. sum_size_fmt
msg = msg .. "\n  Final md files: " .. final_size_fmt

aip.run.pin("progress", 0, {label = "Progress:", content = msg})

-- the .after_all of the agent
return {
    -- to know the number of skipped v.s. processed (since .outputs will be also available)
    total_files     = before_all.total_files,
    processed_count = processed_count,
    skipped_count   = skipped_count,
    raw_size_fmt    = raw_size_fmt,
    final_size_fmt  = final_size_fmt,
}

```